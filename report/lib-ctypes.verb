\section{@Foreign.C.Types@}
\label{sec:CTypes}

The modules @Foreign.C.Types@ provide Haskell types that represent basic C types.
They are needed to accurately represent C function prototypes, and so, to
access C library interfaces in Haskell.  The Haskell system is not required to
represent those types exactly as C does, but the following guarantees are
provided concerning a Haskell type @CT@ representing a C type @t@:
%
\begin{itemize}
\item If a C function prototype has @t@ as an argument or result type,
  the use of @CT@ in the corresponding position in a foreign declaration
  permits the Haskell program to access the full range of values encoded by
  the C type; and conversely, any Haskell value for @CT@ has a valid
  representation in C.
\item @Foreign.Storable.sizeOf (undefined :: CT)@ will yield the same value as
  @sizeof (t)@ in C.
\item @Foreign.Storable.alignment (undefined :: CT)@ matches the alignment
  constraint enforced by the C implementation for @t@.
\item @Foreign.Storable.peek@ and @Foreign.Storable.poke@ map all values of
  @CT@ to the corresponding value of @t@ and vice versa.
\item When an instance of @Bounded@ is defined for @CT@, the values
  of @minBound@ and @maxBound@ coincide with @t_MIN@ and
  @t_MAX@ in C.
\item When an instance of @Eq@ or @Ord@ is defined for @CT@,
  the predicates defined by the type class implement the same relation as the
  corresponding predicate in C on @t@.
\item When an instance of @Num@, @Read@, @Integral@,
  @Fractional@, @Floating@, @RealFrac@, or @RealFloat@ is
  defined for @CT@, the arithmetic operations defined by the type class
  implement the same function as the corresponding arithmetic operations (if
  available) in C on @t@.
\item When an instance of @Bits@ is defined for @CT@, the bitwise
  operation defined by the type class implement the same function as the
  corresponding bitwise operation in C on @t@.
\end{itemize}
%
All types exported by @Foreign.C.Types@ must be represented as @newtype@s of
basic foreign types as defined in Section~\ref{sec:foreign-types} and the
export must be abstract.

The module @Foreign.C.Types@ provides the following integral types, including
instances for @Eq@, @Ord@, @Num@, @Read@, @Show@,
@Enum@, @Storable@, @Bounded@, @Real@, @Integral@,
and @Bits@:
%
\begin{quote}
  \begin{tabular}{|l|l|l|}
    \hline
    Haskell type     & Represented C type\\\hline\hline
    @CChar@     & @char@\\\hline
    @CSChar@    & @signed char@\\\hline
    @CUChar@    & @unsigned char@\\\hline
    @CShort@    & @short@\\\hline
    @CUShort@   & @unsigned short@\\\hline
    @CInt@      & @int@\\\hline
    @CUInt@     & @unsigned int@\\\hline
    @CLong@     & @long@\\\hline
    @CULong@    & @unsigned long@\\\hline
    @CLLong@    & @long long@\\\hline
    @CULLong@   & @unsigned long long@\\\hline
  \end{tabular}
\end{quote}
%
Moreover, it provides the following floating point types, including instances
for @Eq@, @Ord@, @Num@, @Read@, @Show@, @Enum@,
@Storable@, @Real@, @Fractional@, @Floating@,
@RealFrac@, and @RealFloat@:
%
\begin{quote}
  \begin{tabular}{|l|l|l|}
    \hline
    Haskell type     & Represented C type\\\hline\hline
    @CFloat@    & @float@\\\hline
    @CDouble@   & @double@\\\hline
    @CLDouble@  & @long double@\\\hline
  \end{tabular}
\end{quote}
%
The module provides the following integral types, including instances for
@Eq@, @Ord@, @Num@, @Read@, @Show@, @Enum@,
@Storable@, @Bounded@, @Real@, @Integral@, and
@Bits@:
%
\begin{quote}
  \begin{tabular}{|l|l|l|}
    \hline
    Haskell type     & Represented C type\\\hline\hline
    @CPtrdiff@  & @ptrdiff_t@\\\hline
    @CSize@     & @size_t@\\\hline
    @CWchar@    & @wchar_t@\\\hline
    @CSigAtomic@& @sig_atomic_t@\\\hline
  \end{tabular}
\end{quote}
%
Moreover, it provides the following numeric types, including instances for
@Eq@, @Ord@, @Num@, @Read@, @Show@, @Enum@, and
@Storable@:
%
\begin{quote}
  \begin{tabular}{|l|l|l|}
    \hline
    Haskell type     & Represented C type\\\hline\hline
    @CClock@    & @clock_t@\\\hline
    @CTime@     & @time_t@\\\hline
  \end{tabular}
\end{quote}
%
And finally, the following types, including instances for @Eq@ and
@Storable@, are provided:
%
\begin{quote}
  \begin{tabular}{|l|l|l|}
    \hline
    Haskell type     & Represented C type\\\hline\hline
    @CFile@     & @FILE@\\\hline
    @CFpos@     & @fpos_t@\\\hline
    @CJmpBuf@   & @jmp_buf@\\\hline
  \end{tabular}
\end{quote}

